host = "solitaire.local"
cache.dir = "./cache"

game {
  admin {
    key = "admin"
    email = ["kyle@solitaire.gg", "darshan@gmail.com", "tapneal@gmail.com"]
  }
}

play {
  i18n.langs = [ "en", "eo" ]

  assets {
    path = "/public"
    urlPrefix = "/assets"
  }

  http {
    secret.key = "CHANGEME"

    requestHandler = "util.web.RequestHandler"
    filters = "util.web.WebFilters"
    errorHandler = "util.web.ErrorHandler"
    cookies.strict = true

    session.cookieName = "solitaire_gg_session"
    flash.cookieName = "solitaire_gg_flash"
  }

  akka {
    actor-system = "solitaire-gg"
  }

  server {
    http {
      port = 5000
      idleTimeout = 120s
    }
    akka.requestTimeout = 120s
  }

  mailer {
    host = "smtp.gmail.com"
    port = 465
    ssl = true
    tls = false
    user = "solitaire@solitaire.gg"
    password = "..."
    debug = false
    mock = false
  }
}

spark {
  enabled = false
  master = "local[*]"
  uiport = 9002
}

database {
  section = local

  local {
    engine = "postgresql"
    host = "localhost"
    port = 5432
    database = "solitaire"
    username = "solitaire"
    password = "..."
  }
}

akka {
  version = "2.5.11"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  log-dead-letters = on
  log-dead-letters-during-shutdown = off
  log-config-on-start = off
  jvm-exit-on-fatal-error = on

  actor {
    //provider = "akka.cluster.ClusterActorRefProvider"
    //provider = "akka.cluster.RemoteActorRefProvider"
    provider = "akka.actor.LocalActorRefProvider"
  }

  debug {
    receive = off
    autoreceive = off
    lifecycle = off
    fsm = off
    event-stream = off
    unhandled = on
    router-misconfiguration = on
  }

  persistence {
    journal.leveldb.dir = "target/journal"
    snapshot-store.local.dir = "target/snapshots"
  }

  http {
    server.parsing.illegal-header-warnings = off
  }
}

slack {
  enabled = false
  url = "https://hooks.slack.com/services/.../.../..."
}

metrics {
  prometheus {
    enabled = true
    port = 5001
  }
}

